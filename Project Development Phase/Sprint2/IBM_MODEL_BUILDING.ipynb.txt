{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "**IMPORTING LIBRARY**"
      ],
      "metadata": {
        "id": "P5f9jIhmxVIC"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "6z-lFX-_vQM4"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import tensorflow \n",
        "from tensorflow.keras.models import Sequential \n",
        "from tensorflow.keras import layers \n",
        "from tensorflow.keras.layers import Dense,Flatten\n",
        "from tensorflow.keras.layers import Conv2D,MaxPooling2D,Dropout \n",
        "from keras.preprocessing.image import ImageDataGenerator"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**DATA AUGMENTATION**"
      ],
      "metadata": {
        "id": "gaY4vGr_xcxj"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "TESTING AND TRAINING"
      ],
      "metadata": {
        "id": "9oUi3DSC0OP9"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "train_datagen = ImageDataGenerator(rescale=1./255,shear_range=0.2,zoom_range=0.2,horizontal_flip=True)\n",
        "test_datagen=ImageDataGenerator(rescale=1./255)"
      ],
      "metadata": {
        "id": "OsJFJFJKvWvc"
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "x_train = train_datagen.flow_from_directory(\n",
        "    r'/content/drive/MyDrive/IBM/Dataset/TRAIN_SET',\n",
        "    target_size=(64, 64),batch_size=5,color_mode='rgb',class_mode='sparse')\n",
        "x_test = test_datagen.flow_from_directory(\n",
        "    r'/content/drive/MyDrive/IBM/Dataset/TEST_SET',\n",
        "    target_size=(64, 64),batch_size=5,color_mode='rgb',class_mode='sparse') "
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "r5HMG5i7vZVt",
        "outputId": "57943905-4e64-4470-934b-65e7c66cb68e"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Found 4184 images belonging to 5 classes.\n",
            "Found 939 images belonging to 5 classes.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(x_train.class_indices)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UgzGIjpcvZka",
        "outputId": "9bb66650-a86b-490c-a6dc-fda7cb313cb0"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'APPLES': 0, 'BANANA': 1, 'ORANGE': 2, 'PINEAPPLE': 3, 'WATERMELON': 4}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(x_test.class_indices)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ts7lKpcXvhCn",
        "outputId": "eb25e108-56db-4f4b-c5b0-9745e7d94ccc"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'APPLES': 0, 'BANANA': 1, 'ORANGE': 2, 'PINEAPPLE': 3, 'WATERMELON': 4}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from collections import Counter as c\n",
        "c(x_train .labels)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "48zQwc52vhE4",
        "outputId": "d52e161d-c1a4-43fe-fb7f-ae43714fad57"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Counter({0: 995, 1: 1354, 2: 1039, 3: 321, 4: 475})"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**INITIALIZATION OF CNN**"
      ],
      "metadata": {
        "id": "eCgJ_ckbxyGw"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "PERFORMING THE FOLLOWING:\n",
        "1. Adding the convolution layer\n",
        "2. Adding maxpooling layer\n",
        "3. Second Maxpooling snf convolution layers\n",
        "4. Flattening of layers\n",
        "5. Adding Dense layer\n"
      ],
      "metadata": {
        "id": "PZA1Hf9kx9MQ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "classifier = Sequential()\n",
        "classifier.add(Conv2D(32, (3, 3), input_shape=(64, 64, 3), activation='relu'))\n",
        "classifier.add(MaxPooling2D(pool_size=(2, 2)))\n",
        "classifier.add(Conv2D(32, (3, 3), activation='relu'))\n",
        "classifier.add(MaxPooling2D(pool_size=(2, 2)))\n",
        "classifier.add(Flatten())\n",
        "classifier.add(Dense(units=128, activation='relu'))\n",
        "classifier.add(Dense(units=5, activation='softmax')) \n",
        "\n"
      ],
      "metadata": {
        "id": "xBoW5x4zvhIM"
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "classifier.summary()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mAQ7V37PvokE",
        "outputId": "4e9a913a-e32a-44bf-8125-33753fbf2a97"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"sequential\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " conv2d (Conv2D)             (None, 62, 62, 32)        896       \n",
            "                                                                 \n",
            " max_pooling2d (MaxPooling2D  (None, 31, 31, 32)       0         \n",
            " )                                                               \n",
            "                                                                 \n",
            " conv2d_1 (Conv2D)           (None, 29, 29, 32)        9248      \n",
            "                                                                 \n",
            " max_pooling2d_1 (MaxPooling  (None, 14, 14, 32)       0         \n",
            " 2D)                                                             \n",
            "                                                                 \n",
            " flatten (Flatten)           (None, 6272)              0         \n",
            "                                                                 \n",
            " dense (Dense)               (None, 128)               802944    \n",
            "                                                                 \n",
            " dense_1 (Dense)             (None, 5)                 645       \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 813,733\n",
            "Trainable params: 813,733\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**COMPILING THE MODEL**"
      ],
      "metadata": {
        "id": "R3ny45yfypmc"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "classifier.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy']) "
      ],
      "metadata": {
        "id": "VdmMc3f0vor4"
      },
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**FITTING THE MODEL**"
      ],
      "metadata": {
        "id": "N8otQqbbymIm"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "classifier.fit_generator(\n",
        "        generator=x_train,steps_per_epoch = len(x_train),\n",
        "        epochs=10, validation_data=x_test,validation_steps = len(x_test))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "taTtBZvWvt_o",
        "outputId": "eaeff300-0393-47f6-eed4-3865c7a18deb"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/10\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:3: UserWarning: `Model.fit_generator` is deprecated and will be removed in a future version. Please use `Model.fit`, which supports generators.\n",
            "  This is separate from the ipykernel package so we can avoid doing imports until\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "837/837 [==============================] - 63s 75ms/step - loss: 0.4014 - accuracy: 0.8494 - val_loss: 0.4496 - val_accuracy: 0.8328\n",
            "Epoch 2/10\n",
            "837/837 [==============================] - 50s 59ms/step - loss: 0.3665 - accuracy: 0.8602 - val_loss: 0.4661 - val_accuracy: 0.8285\n",
            "Epoch 3/10\n",
            "837/837 [==============================] - 52s 62ms/step - loss: 0.3486 - accuracy: 0.8647 - val_loss: 0.4653 - val_accuracy: 0.8190\n",
            "Epoch 4/10\n",
            "837/837 [==============================] - 51s 61ms/step - loss: 0.3205 - accuracy: 0.8762 - val_loss: 0.3912 - val_accuracy: 0.8562\n",
            "Epoch 5/10\n",
            "837/837 [==============================] - 52s 62ms/step - loss: 0.3067 - accuracy: 0.8776 - val_loss: 0.4102 - val_accuracy: 0.8509\n",
            "Epoch 6/10\n",
            "837/837 [==============================] - 51s 61ms/step - loss: 0.3085 - accuracy: 0.8855 - val_loss: 0.3579 - val_accuracy: 0.8722\n",
            "Epoch 7/10\n",
            "837/837 [==============================] - 48s 58ms/step - loss: 0.2729 - accuracy: 0.8944 - val_loss: 0.4144 - val_accuracy: 0.8605\n",
            "Epoch 8/10\n",
            "837/837 [==============================] - 52s 62ms/step - loss: 0.2618 - accuracy: 0.8984 - val_loss: 0.3602 - val_accuracy: 0.8733\n",
            "Epoch 9/10\n",
            "837/837 [==============================] - 52s 62ms/step - loss: 0.2398 - accuracy: 0.9085 - val_loss: 0.4673 - val_accuracy: 0.8168\n",
            "Epoch 10/10\n",
            "837/837 [==============================] - 51s 61ms/step - loss: 0.2354 - accuracy: 0.9125 - val_loss: 0.6300 - val_accuracy: 0.8381\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<keras.callbacks.History at 0x7f6bb2d7bf90>"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**SAVING THE MODEL**"
      ],
      "metadata": {
        "id": "h2-QdUgnyYqK"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "classifier.save('nutrition.h5')"
      ],
      "metadata": {
        "id": "dFf48zUhvuDH"
      },
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**NUTRITION ANALYSIS RESULT PREDICTION**\n",
        "\n"
      ],
      "metadata": {
        "id": "TlTgCHiExR2e"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "IMPORTING LIBRARY"
      ],
      "metadata": {
        "id": "jOBt2Dc-z6hI"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from tensorflow.keras.models import load_model\n",
        "from tensorflow.keras.preprocessing import image\n",
        "import numpy as np"
      ],
      "metadata": {
        "id": "zS9D21ZDv0DO"
      },
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "img = image.load_img(\"/content/drive/MyDrive/IBM/Dataset/TRAIN_SET/ORANGE/n07749192_10454.jpg\",target_size= (64,64))\n",
        "img"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 81
        },
        "id": "L0wP2Sesv0Kq",
        "outputId": "5d5d9105-68de-49ed-f326-09944922781e"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<PIL.Image.Image image mode=RGB size=64x64 at 0x7F6BB2D140D0>"
            ],
            "image/png": "\n"
          },
          "metadata": {},
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x=image.img_to_array(img)\n",
        "x\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nIgPq0rhv797",
        "outputId": "ccbe646b-5a82-4b5d-fb52-523bd3e1dae0"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[[229., 236., 246.],\n",
              "        [235., 239., 250.],\n",
              "        [237., 241., 252.],\n",
              "        ...,\n",
              "        [ 56.,  58.,  53.],\n",
              "        [ 28.,  32.,  18.],\n",
              "        [ 40.,  41.,  33.]],\n",
              "\n",
              "       [[234., 238., 249.],\n",
              "        [235., 239., 250.],\n",
              "        [237., 241., 252.],\n",
              "        ...,\n",
              "        [ 23.,  26.,   9.],\n",
              "        [ 21.,  24.,   7.],\n",
              "        [ 38.,  39.,  31.]],\n",
              "\n",
              "       [[235., 239., 250.],\n",
              "        [237., 241., 252.],\n",
              "        [238., 242., 251.],\n",
              "        ...,\n",
              "        [ 15.,  19.,   2.],\n",
              "        [ 13.,  17.,   3.],\n",
              "        [ 30.,  31.,  25.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[ 61.,  60.,  39.],\n",
              "        [ 62.,  62.,  36.],\n",
              "        [ 62.,  65.,  38.],\n",
              "        ...,\n",
              "        [ 29.,  32.,  11.],\n",
              "        [ 27.,  30.,  11.],\n",
              "        [ 23.,  25.,  11.]],\n",
              "\n",
              "       [[ 60.,  59.,  38.],\n",
              "        [ 58.,  61.,  34.],\n",
              "        [ 59.,  62.,  35.],\n",
              "        ...,\n",
              "        [ 36.,  37.,  19.],\n",
              "        [ 17.,  22.,   2.],\n",
              "        [ 26.,  30.,  16.]],\n",
              "\n",
              "       [[ 57.,  59.,  37.],\n",
              "        [ 58.,  60.,  38.],\n",
              "        [ 58.,  61.,  34.],\n",
              "        ...,\n",
              "        [ 14.,  18.,   4.],\n",
              "        [ 22.,  24.,  10.],\n",
              "        [ 26.,  28.,  15.]]], dtype=float32)"
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x.ndim\n",
        "x=np.expand_dims(x,axis=0)\n",
        "x.ndim"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QFOt5Ny3v_SH",
        "outputId": "0baa44b6-00ed-4529-f258-934fc13e3a15"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "4"
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "predict_x=classifier.predict(x)\n",
        "classes_x=np.argmax(predict_x,axis = -1)\n",
        "classes_x"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uXO5rOk95-5k",
        "outputId": "9bce5b86-52b2-418d-b7d4-22d0c88178fa"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1/1 [==============================] - 0s 116ms/step\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([2])"
            ]
          },
          "metadata": {},
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "predict_x "
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZouQxI7WwIEJ",
        "outputId": "306845b5-90d9-4bbf-b9ca-da01ac6a16aa"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[0., 0., 1., 0., 0.]], dtype=float32)"
            ]
          },
          "metadata": {},
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "index=['APPLES', 'BANANA', 'ORANGE','PINEAPPLE','WATERMELON']\n",
        "result=str(index[classes_x[0]])\n",
        "result"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 36
        },
        "id": "M0E442oXwMZt",
        "outputId": "9acf9897-305b-4bc1-d9c2-4e5e70240c68"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'ORANGE'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 22
        }
      ]
    }
  ]
}